# -*- coding: utf-8 -*-
"""pmg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/137KhbHgZ6GHoaiP_iD_rk6nTDHc3vfk8
"""

#description: this is a sentiment analysis that parses the tweets fetched from twitter using python

#import the libraries
import tweepy
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#add the twitter API credentials
consumerKey = "rZ9JZ4zD1HtDzgziqnfWK6O9y"
consumerSecret = "XmPkgSepWqqcsDUuAShRTQTDgFRheWQNEtdg9RoWizWxP8wsIv"
accessToken = "1113497821917773824-sJ56saBWlg57jKhTbhmVD1PXUWBPd7"
accessTokenSecret = "2e8NUhFBZtcxHxVDHaqeq26ci39YKzdimjPNdryoPOnch"

# create the authentication object
authenticate = tweepy.OAuthHandler(consumerKey, consumerSecret)

# set the access token and access token secret
authenticate.set_access_token(accessToken, accessTokenSecret)

# create the API object while passing in the auth information
api = tweepy.API(authenticate, wait_on_rate_limit = True)

# extract 100 tweets from the twitter user
posts = api.user_timeline(screen_name = "BillGates", count = 100, lang = "en", tweet_mode = "extended")

# print the last 5 tweets from the account
print("shows the 5 recent tweets: \n")
i = 1
for tweet in posts[0:5]:
  print(str(i) + ') ' + tweet.full_text  + '\n')
  i = i + 1

# create a dataframe with a column called tweets
df = pd.DataFrame([tweet.full_text for tweet in posts], columns = ['Tweets'])

# Show the first 5 rows of data
df.head()

# clean the text

# create a function to clean the tweets
def cleanText(text):
  text = re.sub(r'@[A-Za-z0-9]+', '', text) #removing @mentions
  text = re.sub(r'#', '', text) #removing '#' symbol
  text = re.sub(r'RT[\s]+', '', text) #removing retweets
  text = re.sub(r'https?:\/\/\S', '', text) #removing hyperlinks

  return text

#cleaning the text
df['Tweets'] = df['Tweets'].apply(cleanText)

# show the cleaned text
df

# create a function to get the subjectivity
def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity

# create a function to get the polarity
def getPolarity(text):
  return TextBlob(text).sentiment.polarity

# create two new columns
df['Subjectivity'] = df['Tweets'].apply(getSubjectivity)
df['Polarity'] = df['Tweets'].apply(getPolarity)

# show the new dataframe with the new columns
df

# plot the word cloud
allwords = ' '.join([twts for twts in df['Tweets']])
wordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size = 119).generate(allwords)

plt.imshow(wordCloud, interpolation = "bilinear")
plt.axis('off')
plt.show()

# create a function to compute the negative, neutral and positive analysis
def getAnalysis(score):
  if score < 0:
    return 'Negative'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positive'

df['Analysis'] = df['Polarity'].apply(getAnalysis)

# show the dataframe
df